{
  "version": 3,
  "sources": ["angular:jit:template:src\\app\\components\\navbar\\navbar.html", "angular:jit:style:src\\app\\components\\navbar\\navbar.scss", "src/app/components/navbar/navbar.ts", "src/app/components/navbar/navbar.spec.ts"],
  "sourcesContent": ["<nav class=\"navbar\">\r\n\t<span>Navbar</span>\r\n\t\t\t<label class=\"switch\">\r\n\t\t\t\t<input type=\"checkbox\" [checked]=\"isDarkMode\" (change)=\"toggleDarkMode()\">\r\n\t\t\t\t<span class=\"slider\"></span>\r\n\t\t\t\t<span class=\"switch-label\">{{ isDarkMode ? 'Dark Mode' : 'Light Mode' }}</span>\r\n\t\t\t</label>\r\n</nav>\r\n", "/* src/app/components/navbar/navbar.scss */\n.switch {\n  display: flex;\n  align-items: center;\n  gap: 0.5rem;\n}\n.switch input {\n  display: none;\n}\n.slider {\n  width: 40px;\n  height: 20px;\n  background: #ccc;\n  border-radius: 20px;\n  position: relative;\n  transition: background 0.3s;\n}\n.slider::before {\n  content: \"\";\n  position: absolute;\n  left: 2px;\n  top: 2px;\n  width: 16px;\n  height: 16px;\n  background: #fff;\n  border-radius: 50%;\n  transition: transform 0.3s;\n}\ninput:checked + .slider {\n  background: #333;\n}\ninput:checked + .slider::before {\n  transform: translateX(20px);\n  background: #f1f1f1;\n}\n.switch-label {\n  font-size: 0.9rem;\n}\n/*# sourceMappingURL=navbar.css.map */\n", "import { Component } from '@angular/core';\r\n\r\n\r\n@Component({\r\n  selector: 'app-navbar',\r\n  templateUrl: './navbar.html',\r\n  styleUrl: './navbar.scss'\r\n})\r\nexport class Navbar {\r\n  isDarkMode = false;\r\n\r\n  toggleDarkMode() {\r\n    this.isDarkMode = !this.isDarkMode;\r\n    if (this.isDarkMode) {\r\n      document.body.classList.add('dark-mode');\r\n    } else {\r\n      document.body.classList.remove('dark-mode');\r\n    }\r\n  }\r\n}\r\n", "import { ComponentFixture, TestBed } from '@angular/core/testing';\r\n\r\nimport { Navbar } from './navbar';\r\n\r\ndescribe('Navbar', () => {\r\n  let component: Navbar;\r\n  let fixture: ComponentFixture<Navbar>;\r\n\r\n  beforeEach(async () => {\r\n    await TestBed.configureTestingModule({\r\n      imports: [Navbar]\r\n    })\r\n    .compileComponents();\r\n\r\n    fixture = TestBed.createComponent(Navbar);\r\n    component = fixture.componentInstance;\r\n    fixture.detectChanges();\r\n  });\r\n\r\n  it('should create', () => {\r\n    expect(component).toBeTruthy();\r\n  });\r\n});\r\n"],
  "mappings": ";;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACAA,IAAAA;AAAA,IAAAC,eAAA;AAAA;AAAA,IAAAD,kBAAA;AAAA;AAAA;;;ICQa;;;;;;;AARb;AAQO,IAAM,SAAN,MAAME,QAAM;MACjB,aAAa;MAEb,iBAAc;AACZ,aAAK,aAAa,CAAC,KAAK;AACxB,YAAI,KAAK,YAAY;AACnB,mBAAS,KAAK,UAAU,IAAI,WAAW;QACzC,OAAO;AACL,mBAAS,KAAK,UAAU,OAAO,WAAW;QAC5C;MACF;;AAVW,aAAM,WAAA;MALlB,UAAU;QACT,UAAU;QACV,UAAA;;OAED;OACY,MAAM;;;;;ACRnB;;;AAEA,IAAAC;AAEA,aAAS,UAAU,MAAK;AACtB,UAAI;AACJ,UAAI;AAEJ,iBAAW,MAAW;AACpB,cAAM,QAAQ,uBAAuB;UACnC,SAAS,CAAC,MAAM;SACjB,EACA,kBAAiB;AAElB,kBAAU,QAAQ,gBAAgB,MAAM;AACxC,oBAAY,QAAQ;AACpB,gBAAQ,cAAa;MACvB,EAAC;AAED,SAAG,iBAAiB,MAAK;AACvB,eAAO,SAAS,EAAE,WAAU;MAC9B,CAAC;IACH,CAAC;;;",
  "names": ["navbar_default", "init_navbar", "Navbar", "init_navbar"]
}
